<?php
namespace AppBundle\Repository;

use Symfony\Component\DependencyInjection\ContainerInterface as Container;
use Doctrine\ORM\EntityRepository;
use Snc\RedisBundle\Doctrine\Cache\RedisCache;
use Predis\Client;

/**
 * MaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaterialRepository extends EntityRepository
{
	const CACHE_LIFETIME = 3600;

	private $predis;

	public function findAll()
    {
 
    	$this->setPredis();
    	$query = $this->getEntityManager()
	        ->createQuery(
		        'SELECT m
				FROM AppBundle:Material m
				ORDER BY m.name ASC')
            ->setResultCacheDriver($this->predis)
            ->setResultCacheLifetime(self::CACHE_LIFETIME)
            ->getResult();

        try {
	        return $query;
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
    }

	public function findOneBySlug($slug)
	{
		$this->setPredis();
		$query = $this->getEntityManager()
	        ->createQuery(
		        'SELECT m
				FROM AppBundle:Material m
				WHERE m.slug = :slug')
	        ->setParameter('slug', $slug)
            ->setResultCacheDriver($this->predis)
            ->setResultCacheLifetime(self::CACHE_LIFETIME)
            ->getSingleResult();

	    try {
	        return $query;
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function retrieveArrayAllMaterials()
	{
		$materials = $this->findAll();

		if (!$materials) {
			return array();
		}

		foreach ($materials as $material) {
			$arrayOfAllMaterials[] = $material->getName();
		}

		return $arrayOfAllMaterials;
	}

	public function setPredis() 
	{
  		$this->predis = new RedisCache();
		$this->predis->setRedis(new Client());
	}
}
	